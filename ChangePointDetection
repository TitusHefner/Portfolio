import pandas as pd
import os
import ruptures as rpt
import matplotlib.pyplot as plt
from tqdm.notebook import tqdm
from joblib import Parallel, delayed


folder_path = 'path/to/folder'

def read_csv_files_from_folder(folder_path):
    dataframes = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.csv'):
            file_path = os.path.join(folder_path, filename)
            df = pd.read_csv(file_path, delimiter=';')
            dataframes.append(df)
    return dataframes


dataframes_list = read_csv_files_from_folder(folder_path)


combined_df = pd.concat(dataframes_list, ignore_index=True)


combined_df['Sample'] = combined_df.index + 1


combined_df.tail()


data = combined_df['corrected diameter [mm] '].values.reshape(-1, 1)


model = 'l1'
pen = 5


def fit_pelt(data, model, jump, pen):
    algo = rpt.Pelt(model=model, jump=jump).fit(data)
    result = algo.predict(pen=pen)
    return result


def calculate_targets(chunk_df, usl, lsl, n):
    sigma = chunk_df['corrected diameter [mm] '].std()
    upper_target = ((usl + lsl) / 2) + (n * sigma)
    lower_target = ((usl + lsl) / 2) - (n * sigma)
    return upper_target, lower_target


change_points = fit_pelt(data, model, jump=1, pen=pen)


segments_dataframes = []


for i, cp in enumerate(change_points):
    if i == 0:
        segment_df = combined_df.iloc[:cp].copy()
    else:
        segment_df = combined_df.iloc[change_points[i-1]:cp].copy()
    segments_dataframes.append(segment_df)


usl = 71.5
lsl = 68.5
n = 2


upper_targets = []
lower_targets = []


plt.figure(figsize=(12, 6))
for s in change_points:
    plt.axvline(x=s, color='r', linestyle='--', linewidth=2, alpha=0.7)
plt.plot(combined_df['Sample'], combined_df['corrected diameter [mm] '], label='Diameter')
plt.xlabel('Sample Number')
plt.ylabel('Diameter')
plt.title('Segmentation Change Points vs. Whole Dataset')
plt.legend()
plt.show()


for i, segment_df in enumerate(segments_dataframes):
    # Perform analysis on each segment_df as needed
    # For example, you can plot or analyze each segment here
    plt.figure(figsize=(8, 4))
    plt.plot(segment_df['Sample'], segment_df['corrected diameter [mm] '])
    plt.xlabel('Sample Number')
    plt.ylabel('Diameter')
    plt.title(f'Segment {i+1}')
    plt.show()


for i, segment_df in enumerate(segments_dataframes):
    upper_target, lower_target = calculate_targets(segment_df, usl, lsl, n)
    print(f"Segment {i+1} - Upper Target: {upper_target}, Lower Target: {lower_target}")
    weight = len(segment_df)
    upper_targets.append(upper_target * weight)
    lower_targets.append(lower_target * weight)
    plt.figure(figsize=(8, 4))
    plt.plot(segment_df['Sample'], segment_df['corrected diameter [mm] '], label='Segment Data')
    plt.axhline(usl, color='y', linestyle='solid', label='USL')
    plt.axhline(lsl, color='y', linestyle='solid', label='LSL')
    plt.axhline(((usl + lsl) / 2), color='g', linestyle='solid', label='Nominal')
    plt.axhline(upper_target, color='r', linestyle='--', label='Upper Target')
    plt.axhline(lower_target, color='r', linestyle='--', label='Lower Target')
    plt.xlabel('Sample Number')
    plt.ylabel('Diameter')
    plt.title(f'Segment {i+1}')
    plt.legend()
    plt.show()


weighted_avg_upper_target = sum(upper_targets) / sum(len(df) for df in segments_dataframes)
weighted_avg_lower_target = sum(lower_targets) / sum(len(df) for df in segments_dataframes)


print(f"Weighted Average Upper Target: {weighted_avg_upper_target}")
print(f"Weighted Average Lower Target: {weighted_avg_lower_target}")


tolerance = (weighted_avg_upper_target - weighted_avg_lower_target)/2
print("Tolerance [mm] is +/- ", tolerance)
